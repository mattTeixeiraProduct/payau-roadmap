---
alwaysApply: false
---

# Future Enhancements & References

## Planned Features

When implementing these, follow the established patterns:

### Project Management
- [ ] Edit existing projects (update dialog)
- [ ] Delete projects (hook up context menu to database)
- [ ] Drag-to-update dates (save to database on drag end)
- [ ] Bulk operations (select multiple projects)
- [ ] Duplicate projects

### Collaboration Features
- [ ] Real-time collaboration (Supabase realtime subscriptions)
- [ ] User authentication (Clerk or Supabase Auth)
- [ ] User roles and permissions
- [ ] Comments/notes on projects
- [ ] Activity log/audit trail

### Progress Tracking
- [ ] Project progress tracking with percentage
- [ ] Milestone tracking
- [ ] Status change history
- [ ] Automatic status updates based on dates

### Advanced Features
- [ ] File attachments to projects
- [ ] Export to PDF/Excel
- [ ] Email notifications
- [ ] Slack/Teams integration
- [ ] Custom fields per stream
- [ ] Project dependencies/blockers
- [ ] Resource allocation

### Analytics & Reporting
- [ ] Dashboard with metrics
- [ ] Burndown charts
- [ ] Velocity tracking
- [ ] Custom reports
- [ ] Timeline forecasting

## Implementation Patterns for Common Enhancements

### Adding Edit Functionality
```typescript
// 1. Create edit dialog (similar to create dialog)
// 2. Pre-fill form with existing project data
// 3. Call updateProject() on submit
// 4. Update local state with transformed result
```

### Adding Delete Functionality
```typescript
// Hook up existing context menu "Remove from roadmap"
const handleRemoveFeature = async (id: string) => {
  if (!confirm('Are you sure you want to delete this project?')) return;
  
  try {
    await deleteProject(id);
    setFeatures(features.filter(f => f.id !== id));
  } catch (error) {
    console.error('Error deleting project:', error);
    alert('Failed to delete project');
  }
};
```

### Adding Real-time Updates
```typescript
// Use Supabase real-time subscriptions
useEffect(() => {
  const supabase = createClient();
  
  const channel = supabase
    .channel('projects-changes')
    .on('postgres_changes', 
      { event: '*', schema: 'public', table: 'projects' },
      (payload) => {
        // Refetch projects or update local state
        fetchProjects();
      }
    )
    .subscribe();
    
  return () => {
    supabase.removeChannel(channel);
  };
}, []);
```

## References

- Supabase Docs: https://supabase.com/docs
- shadcn/ui Docs: https://ui.shadcn.com
- Next.js App Router: https://nextjs.org/docs/app
- Date-fns: https://date-fns.org
- Radix UI: https://www.radix-ui.com
- TanStack Table: https://tanstack.com/table
- DnD Kit: https://dndkit.com
